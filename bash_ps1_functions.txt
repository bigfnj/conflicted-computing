#------------------------------------
# Function Reliant BASH Prompt | PS1
#------------------------------------
# Current Format: NEWLINE PWD
#                 SMILEY USER@HOST $
# LOAD:
#    Green     == machine load is low
#    Orange    == machine load is medium
#    Red       == machine load is high
#    ALERT     == machine load is very high
# USER:
#    Cyan      == normal user
#    Orange    == SU to user
#    Red/White == root
# HOST:
#    Cyan      == local session
#    Green     == secured remote connection (via ssh)
#    Red       == unsecured remote connection
# PWD:
#    Green     == more than 10% free disk space
#    Orange    == less than 10% free disk space
#    ALERT     == less than 5% free disk space
#    Red       == current user does not have write privileges
#    Cyan      == current filesystem is size zero (like /proc)
# $:
#    White     == no background or suspended jobs in this shell
#    Cyan      == at least one background job in this shell
#    Orange    == at least one suspended job in this shell
#
# SMILEY:
#    Green     == last exit code was positive
#    Red       == last exit code was negative

# Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
    CNX=${Green}        # Connected on remote machine, via ssh (good).
elif [[ "${DISPLAY%%:0*}" != "" ]]; then
    CNX=${ALERT}        # Connected on remote machine, not via ssh (bad).
else
    CNX=${BCyan}        # Connected on local machine.
fi

# Test user type:
if [[ ${USER} == "root" ]]; then
    SU=${BIRed}${On_White}  # User is root.
elif [[ ${USER} != $(logname) ]]; then
    SU=${BRed}              # User is not login user.
else
    SU=${BCyan}             # User is normal (well ... most of us are).
fi


NCPU=$(grep -c 'processor' /proc/cpuinfo)    # Number of CPUs
SLOAD=$(( 100*${NCPU} ))        # Small load
MLOAD=$(( 200*${NCPU} ))        # Medium load
XLOAD=$(( 400*${NCPU} ))        # Xlarge load


# Returns system load as percentage, i.e., '40' rather than '0.40)'.
function load()
{
    local SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    # System load of the current host.
    echo $((10#$SYSLOAD))       # Convert to decimal.
}


# Returns a color indicating system load.
function load_color()
{
    local SYSLOAD=$(load)
    if [ ${SYSLOAD} -gt ${XLOAD} ]; then
        echo -en ${ALERT}
    elif [ ${SYSLOAD} -gt ${MLOAD} ]; then
        echo -en ${Red}
    elif [ ${SYSLOAD} -gt ${SLOAD} ]; then
        echo -en ${BRed}
    else
        echo -en ${Green}
    fi
}


# Returns a color according to free disk space in $PWD.
function disk_color()
{
    if [ ! -w "${PWD}" ] ; then
        echo -en ${Red}
        # No 'write' privilege in the current directory.
    elif [ -s "${PWD}" ] ; then
        local used=$(command df -P "$PWD" |
                   awk 'END {print $5} {sub(/%/,"")}')
        if [ ${used} -gt 95 ]; then
            echo -en ${ALERT}           # Disk almost full (>95%).
        elif [ ${used} -gt 90 ]; then
            echo -en ${BRed}            # Free disk space almost gone.
        else
            echo -en ${Green}           # Free disk space is ok.
        fi
    else
        echo -en ${Cyan}
        # Current directory is size '0' (like /proc, /sys etc).
    fi
}


# Returns a color according to running/suspended jobs.
function job_color()
{
    if [ $(jobs -s | wc -l) -gt "0" ]; then
        echo -en ${BRed}
    elif [ $(jobs -r | wc -l) -gt "0" ] ; then
        echo -en ${BCyan}
    fi
}


# Returns free vs total f:t memory in use by system
function memory_use ()
  {   
        local M=$( free -olm|sed "/Mem/!d; s/Mem:[^0-9]*\([0-9]*\)[^0-9]*\([0-9]*\)[^0-9]*\([0-9]*\).*/\2M\:\3M/";); echo "$M"
  }


# Function that shortens the pwd printout in prompt to truncate if it gets to long; YMMV
# Returns base home directory, then truncates with ".." and shows final 2 directories
# IE: ~/../../../workspace/testing_stuff
function shorter_pwd ()
 {
  pwd | sed s.$HOME.~.g | awk -F"/" '
  BEGIN { ORS="/" }
  END {
  for (i=1; i<= NF; i++) {
      if ((i == 1 && $1 != "") || i == NF-1 || i == NF) {
        print $i
      }   
      else if (i == 1 && $1 == "") {
        print "/"$2
        i++ 
      }   
      else {
        print ".."
      }   
    }   
  }'  
}


# Create a function for prompt command so its re-run everytime its called
function prompt_ps1 ()
{
    if [ $? -eq 0 ]; then               # set an error string for the prompt, as smilies!
        ERRPROMPT="\e[1;92m:)\e[m"
    else
        ERRPROMPT="\e[1;31m:(\e[m"
    fi

# Now we construct the prompt.

        # PWD (with 'disk space' info):
        PS1="\n\[\$(disk_color)\]\w\[${NC}\] "

        # Exit Command (as a colored smiley)
        PS1=${PS1}"\n$ERRPROMPT\[${NC}\] "

        # User@Host (with connection type info):
        PS1=${PS1}"\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] "

        # End Prompt (with 'job' info):
        PS1=${PS1}"\[\$(job_color)\]\\$\[${NC}\] "
}


# Set PROMPT_COMMAND to a function
export PROMPT_COMMAND=prompt_ps1


#-------------------------------------------------------------
# MAY BE SWAPPED AROUND WITH BELOW CONSTRUCTIONS
#-------------------------------------------------------------
# * NOTE the difference between the following:
# PS1=
# PS1=${PS1}
# The ${PS1} is ONLY required after the initial prompt entry
# When putting something FIRST, simply use PS1=
# The following prompt contstructs require ${PS1} to tell the
# system that this follows the PS1=
# The prompt loads in ORDER so keep that in mind
#-------------------------------------------------------------


        # Memory in use by system (with system load color info):
        #PS1="\n\[\$(load_color)\]$(memory_use)\[${NC}\] "

 
        # Time of day (with load info):
        #PS1=${PS1}"\[\$(load_color)\][\t\[${NC}\] "     
# \t   The time, in 24-hour HH:MM:SS format. 
# \T   The time, in 12-hour HH:MM:SS format. 
# \@   The time, in 12-hour am/pm format.


        # Symbol or Character (with load info):
        #PS1=${PS1}"\n\[\$(load_color)\]*\[${NC}\] "
# ¤ λ ± * ⌘ ☿ ♆ ♅ ♁ ☼ ☸ ☮ ☯ ☭ ☪ ☩ ☧ ☢ ☣ ☠ ☊ ☋ ☉ ☄ ★ ☆ ☍ ☨ ♄ ⚕ ☤ ⚪ ⚫ ⚳ ⚴ ⚵ ⚶ ⛯


        # Shorter PWD (with 'disk space' info):
        #PS1="\n\[\$(disk_color)\]\$(shorter_pwd)\[${NC}\] "
