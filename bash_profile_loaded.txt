#-----------------------------------------------------------------------
# Ensure that foundational / operating system paths are always included
# Always add system paths to the start of PATH
#-----------------------------------------------------------------------
[ -d /usr/sbin ] && export PATH="/usr/sbin:${PATH}"
[ -d /sbin ] && export PATH="/sbin:${PATH}"
PATH=$PATH:$HOME/bin
export PATH


#--------------------------------------------
# Get the extended bash profile coniguration
#--------------------------------------------
if [ -f ~/.bashrc ]; then
      . ~/.bashrc
fi


#--------------------------
# ASCII ART PRINT on login
#--------------------------
if [ -f ~/.ascii ]; then
    cat ~/.ascii
fi


#--------------------------------------------
# if fortunes are available then give us one
#--------------------------------------------
which fortune 1> /dev/null 2> /dev/null
if [[ $? == 0 ]]; then
	fortune
	echo
fi


#-----------------------------------
# Many things look better in CoLoR!
# Lets Call That File
# ~/.bash_colorlist
#-----------------------------------
#-----------------------------------------------------
# Define Color Definitions for use in functions, etc.
# Some colors might look different on some terminals
#-----------------------------------------------------
# Resets
Color_Off='\e[0m'       # Text Reset
NC="\e[m"               # Color Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White


#--------
# Alert!
#--------
ALERT=${BWhite}${On_Red} # Bold White on red background


#-----------------------------------------------
# Directory Color More Readable - Set to Yellow
#-----------------------------------------------
LS_COLORS='di=1;33' ; export LS_COLORS


#---------------------
#History Colorization
#---------------------
BCyan='\e[1;36m'        # Bold Cyan
export HISTIGNORE="&:bg:fg:pwd:ll"
export HISTTIMEFORMAT="$(echo -e ${BCyan})[%d/%m %H:%M:%S]$(echo -e ${NC}) "
export HISTCONTROL=ignoreboth


#-------------------------------------------------------------
# Tailoring 'less' to make MAN pages more readable with color
#-------------------------------------------------------------
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'


#--------------------
# GREP Option Export
#--------------------
export GREP_OPTIONS='--color=auto'



#-----------------------------------------------
#If user = USERID Then source this profile also
#-----------------------------------------------
if [ "$SUDO_USER" == "user.id" ]; then
        . .user.id_profile
fi


#------------------------------------------------------------------
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
#------------------------------------------------------------------
#-------------------------------
# Alias Redefinitions "Colorize"
#-------------------------------
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'


#-------------------------------
# Alias Redefinitions "Generic"
#-------------------------------
alias c='clear'                     #clear the screen easily
alias ..='cd ..'                    #Go back 1 directory
alias sudo='sudo '                  #common typo correction
alias wget='wget -c'                #continue on errors
alias tf='tail -250f'               #tail and follow buffering up the last 250 lines
alias mkdir='mkdir -pv'             #create parent directory if required
alias du='du -ach | sort -h'        #make du more readable


#-----------------------------------------------------------------------
# The 'ls' family
# Add colors for filetype and  human-readable sizes by default on 'ls':
#-----------------------------------------------------------------------
alias ls='ls -h --color=tty'        #List with color option
alias lx='ls -lXB'                  #Sort by extension.
alias lk='ls -lSr'                  #Sort by size, biggest last.
alias lt='ls -ltr'                  #Sort by date, most recent last.
alias lc='ls -ltcr'                 #Sort by/show change time,most recent last.
alias lu='ls -ltur'                 #Sort by/show access time,most recent last.
#-----------------------------------------------------------------------
# The ubiquitous 'll': directories first, with alphanumeric sorting:
#-----------------------------------------------------------------------
alias ll='ls -lvh --group-directories-first --color=auto'
alias lm='ll |more'                 #Pipe through 'more'
alias la='ll -Atr'                  #Show hidden files
alias l.='ls -d .* --color=auto'    #list only hidden without directories
alias lah='ll -Ad .* --color=tty'   #list only hidden
alias lr='ll -R'                    #Recursive ls


#-------------------------------------------------
# New or added Functionality to existing commands
#-------------------------------------------------
alias ports='netstat -tulanp'
alias meminfo='free -m -l -t'
alias mount='mount |column -t'
alias now='date +"%T | %m-%d-%Y"'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'     # Pass an argument IE: psg bash


#-------------------------------
# Get top process eating memory
#-------------------------------
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'


#-------------------------------------------
# Alias Pretty-print of some PATH variables
#-------------------------------------------
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'


#uncomment after installing "vim-enhanced"
#alias vi='vim'


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# SUDO ALIAS SECTION - REQUIRES SUDO! #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#


#---------------------------------------------
# Shortcut  for iptables and pass it via sudo
#---------------------------------------------
alias ipt='sudo /sbin/iptables'


#---------------------------
# IP Tables - Make Friendly
#---------------------------
alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias firewall=iptlist


#------------------------------------------------------------------
# Enhanced BASH Profile Functions.
# You may want to put all your funtions into a separate file like
# ~/.bash_functions, instead of adding them here directly.
#------------------------------------------------------------------
#------------------------------------------------
# Add some system level functions
#------------------------------------------------
# my_ps     #Current User Process
# my_pp     #Current User Process forked Mapping
# killps    #Kill Process by Name
# my_ip     #Get IP adress on via hostname -I
# mydf      #Pretty print of df output in 'ii'
# ii        #Get current host related info
#------------------------------------------------

function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }

function my_pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

function killps()   # kill by process name
{
    local pid pname sig="-TERM"   # default signal
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}


function my_ip() # Get IP adress on ethernet.
{
    /bin/hostname -I
}


function mydf()
{
    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Ph --block-size=M $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out+="*"
            else
               out+="-"
            fi
        done
        local used=${info[2]}
        local pct="$(printf '%4s' $used)"
        free="$(printf '%9s' $free)"
        out+="] "$free" free on "$fs
        pct+="$out"
        echo "$pct"
    done
}


function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${BRed}$HOSTNAME"
    echo -e "\n${BRed}Additionnal kernel information:$NC " ; uname -a
    echo -e "\n${BRed}Release  information:$NC " ; sh ~/.function_linux_release.sh
    echo -e "\n${BRed}Java in use by system:$NC " ; java -version
    echo -e "\n${BRed}Users logged on:$NC " ; who | cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free -m | grep ^Mem: | awk '{total=$2;used=$3-$6-$7;free=total-used} END {printf("%7'"'"'d MB Total\n%7'"'"'d MB Used\n%7'"'"'d MB Free",total,used,free)}' 
    echo -e "\n\n${BRed}Diskspace :$NC " ; mydf `df -x tmpfs -x devtmpfs -hP | grep -v Filesystem | awk '{ print $6 }'` 
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo
}


#-------------------------------------------------------------------------
# File & strings related functions:
#-------------------------------------------------------------------------
# ff        #Find a file with a pattern in name
# fe        #Find a file with a pattern $1 in the name & execute $2 on it
# fstr      #Find a pattern in a set of files & highlight them
# swap      #Swap 2 filenames around, if they exist
#-------------------------------------------------------------------------
# Find a file with a pattern in name:
function ff() {
  find . -type f -iname '*'"$*"'*' -ls 2>/dev/null
}

# Find a file with pattern $1 in name and Execute $2 on it:
function fe() { find . -type f -iname '*'"${1:-}"'*' \
-exec ${2:-file} {} \;  ; }

#  Find a pattern in a set of files and highlight them:
#+ (needs a recent version of egrep).
function fstr()
{
    OPTIND=1
    local mycase=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
           i) mycase="-i " ;;
           *) echo "$usage"; return ;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more

}


function swap()
{ # Swap 2 filenames around, if they exist
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}


#---------------------------------------------
# Misc utilities:
# Repeat    # Repeat n times command
# Ask       # See 'killps' for example of use
#---------------------------------------------

function repeat()       # Repeat n times command.
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}


function ask()          # See 'killps' for example of use.
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

#---
#END
#-------------------------------------
# Function to run upon exit of shell.
function _exit()
{
    echo -e "${BWhite}${On_Red}Hasta la vista, baby${NC}"
}
trap _exit EXIT


#------------------------------------------------------------------
# Load the bash prompt
# un-comment the IF statement depending on preference
# .bash_ps1_functions = prompt that relies on system functions
# .bash_ps1_standard  = prompt that does not rely on any functions
# or auxilary files (such as .bash_colorlist)
#------------------------------------------------------------------
#------------------------------------
# Function Reliant BASH Prompt | PS1
#------------------------------------
# Current Format: PWD
#                 SMILEY USER@HOST $
# TIME/LOAD:
#    Green     == machine load is low
#    Orange    == machine load is medium
#    Red       == machine load is high
#    ALERT     == machine load is very high
# USER:
#    Cyan      == normal user
#    Orange    == SU to user
#    Red       == root
# HOST:
#    Cyan      == local session
#    Green     == secured remote connection (via ssh)
#    Red       == unsecured remote connection
# PWD:
#    Green     == more than 10% free disk space
#    Orange    == less than 10% free disk space
#    ALERT     == less than 5% free disk space
#    Red       == current user does not have write privileges
#    Cyan      == current filesystem is size zero (like /proc)
# $:
#    White     == no background or suspended jobs in this shell
#    Cyan      == at least one background job in this shell
#    Orange    == at least one suspended job in this shell
#
# SMILEY:
#    Green     == last exit code was positive
#    Red       == last exit code was negative

# Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
    CNX=${Green}        # Connected on remote machine, via ssh (good).
elif [[ "${DISPLAY%%:0*}" != "" ]]; then
    CNX=${ALERT}        # Connected on remote machine, not via ssh (bad).
else
    CNX=${BCyan}        # Connected on local machine.
fi

# Test user type:
if [[ ${USER} == "root" ]]; then
    SU=${Red}           # User is root.
elif [[ ${USER} != $(logname) ]]; then
    SU=${BRed}          # User is not login user.
else
    SU=${BCyan}         # User is normal (well ... most of us are).
fi


NCPU=$(grep -c 'processor' /proc/cpuinfo)    # Number of CPUs
SLOAD=$(( 100*${NCPU} ))        # Small load
MLOAD=$(( 200*${NCPU} ))        # Medium load
XLOAD=$(( 400*${NCPU} ))        # Xlarge load


# Returns system load as percentage, i.e., '40' rather than '0.40)'.
function load()
{
    local SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    # System load of the current host.
    echo $((10#$SYSLOAD))       # Convert to decimal.
}


# Returns a color indicating system load.
function load_color()
{
    local SYSLOAD=$(load)
    if [ ${SYSLOAD} -gt ${XLOAD} ]; then
        echo -en ${ALERT}
    elif [ ${SYSLOAD} -gt ${MLOAD} ]; then
        echo -en ${Red}
    elif [ ${SYSLOAD} -gt ${SLOAD} ]; then
        echo -en ${BRed}
    else
        echo -en ${Green}
    fi
}


# Returns a color according to free disk space in $PWD.
function disk_color()
{
    if [ ! -w "${PWD}" ] ; then
        echo -en ${Red}
        # No 'write' privilege in the current directory.
    elif [ -s "${PWD}" ] ; then
        local used=$(command df -P "$PWD" |
                   awk 'END {print $5} {sub(/%/,"")}')
        if [ ${used} -gt 95 ]; then
            echo -en ${ALERT}           # Disk almost full (>95%).
        elif [ ${used} -gt 90 ]; then
            echo -en ${BRed}            # Free disk space almost gone.
        else
            echo -en ${Green}           # Free disk space is ok.
        fi
    else
        echo -en ${Cyan}
        # Current directory is size '0' (like /proc, /sys etc).
    fi
}


# Returns a color according to running/suspended jobs.
function job_color()
{
    if [ $(jobs -s | wc -l) -gt "0" ]; then
        echo -en ${BRed}
    elif [ $(jobs -r | wc -l) -gt "0" ] ; then
        echo -en ${BCyan}
    fi
}


# Create a function for prompt command so its re-run everytime its called
function prompt_ps1 ()
{
    if [ $? -eq 0 ]; then               # set an error string for the prompt, as smilies!
        ERRPROMPT="\e[1;92m:)\e[m"
    else
        ERRPROMPT="\e[1;31m:(\e[m"
    fi


# Now we construct the prompt.
        # PWD (with 'disk space' info):
        PS1="\n\[\$(disk_color)\]\w\[${NC}\] "

        # Exit Command (as a colored smiley)
        PS1=${PS1}"\n$ERRPROMPT\[${NC}\] "
        
        # User@Host (with connection type info):
        PS1=${PS1}"\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] "

        # End Prompt (with 'job' info):
        PS1=${PS1}"\[\$(job_color)\]\$\[${NC}\] "
}


# Set PROMPT_COMMAND to a function
export PROMPT_COMMAND=prompt_ps1


#-------------------------------------------------
# MAY BE SWAPPED AROUND WITH BELOW CONSTRUCTIONS
#-------------------------------------------------

# \t   The time, in 24-hour HH:MM:SS format. 
# \T   The time, in 12-hour HH:MM:SS format. 
# \@   The time, in 12-hour am/pm format.
 
        # Time of day (with load info):
        #PS1=${PS1}"\[\$(load_color)\][\t\[${NC}\] "     

# ¤
# ±
# *  
        # Symbol or Character (with load info):
        #PS1=${PS1}"\n\[\$(load_color)\]*\[${NC}\] "


#-------------------------------------------
# Command Prompt (Toggled based on ROOT)
# Line1: PWD     (Current path)
# Line2: successrun/smiley user@hostname $
#-------------------------------------------
# If id command returns zero, you?ve root access!
#if [ $(id -u) -eq 0 ];
#then # you are ROOT!, set ROOT command prompt
#  PS1="\n\[\e[0;95m\]\w\[\e[1;95m\]\[\e[m\] \n\$(if [[ \$? == 0 ]]; then echo \"\[\e[1;92m\]:)\"; else echo \"\[\e[1;31m\]:(\"; fi)\[\033[00m\] \[\e[47m\e[1;31m\]\u\[\e[m\]\[\e[4;36m\]@\[\e[0;36m\]\h\[\e[m\] \[\e[1;94m\]\\$\[\e[m\] "
#else # you are NOT root, set NORMAL command prompt
#  PS1="\n\[\e[0;95m\]\w\[\e[1;95m\]\[\e[m\] \n\$(if [[ \$? == 0 ]]; then echo \"\[\e[1;92m\]:)\"; else echo \"\[\e[1;31m\]:(\"; fi)\[\033[00m\] \[\e[0;36m\]\u\[\e[4;36m\]@\[\e[0;36m\]\h\[\e[m\] \[\e[1;94m\]\\$\[\e[m\] "
#fi


#--------------------------------------------------------
# SUDO User Command Prompt - (NOT toggled based on ROOT)
# Exports this command prompt to any user you sudo into
# Line1: PWD
# Line2: successrun/smiley user@hostname $
#--------------------------------------------------------
#export SUDO_PS1="\n\[\e[0;95m\]\w\[\e[1;95m\]\[\e[m\] \n\$(if [[ \$? == 0 ]]; then echo \"\[\e[1;92m\]:)\"; else echo \"\[\e[1;31m\]:(\"; fi)\[\033[00m\] \[\e[0;36m\]\u\[\e[4;36m\]@\[\e[0;36m\]\h\[\e[m\] \[\e[1;94m\]\\$\[\e[m\] "


#----------------------------------------------------
# If any error is made and the profile will not load
# SSH like this and fix the profile then relog
#----------------------------------------------------
# ssh -t HOSTNAME "bash --noprofile --norc"


#---
#END
#---
